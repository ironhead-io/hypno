# @configure_input@
## --------------------------------------------------------- ##
## Makefile
## 
## @summary
## Contains all the targets necessary to assemble
## Hypno on most machines. 
##
## @author
## Copyright 2021 Tubular Modular Inc. dba Collins Design
## --------------------------------------------------------- ##
NAME = @PACKAGE_NAME@
VERSION = @PACKAGE_VERSION@ 
PREFIX = @prefix@
EXEC_PREFIX = @exec_prefix@
BINDIR = @bindir@
WEBDIR = /var/www
srcdir = @srcdir@
VPATH = @srcdir@
SRVUSER = ramar
SRVGROUP = ramar
IFLAGS = -Ivendor -I/usr/include/lua5.3
LDFLAGS = -ldl -lpthread -lgnutls
#-L/usr/lib/x86_64-linux-gnu -
DEBUGFLAGS = -DDEBUG_H
CLANGFLAGS = -Wall -Werror -Wno-unused -Wno-format-security $(IFLAGS)
GCCFLAGS = -Wall -Werror -Wno-unused -Wno-strict-overflow -Wno-strict-aliasing \
	-Wno-format-truncation -Wno-return-local-addr -O2 $(IFLAGS)
CFLAGS = $(GCCFLAGS)
CC = gcc
SRC = \
	@srcdir@/vendor/zrender.c \
	@srcdir@/vendor/ztable.c \
	@srcdir@/vendor/sqlite3.c \
	@srcdir@/vendor/zdb.c \
	@srcdir@/vendor/zwalker.c \
	@srcdir@/vendor/zhttp.c \
	@srcdir@/vendor/zmime.c \
	@srcdir@/vendor/zjson.c \
	@srcdir@/vendor/router.c \
	@srcdir@/src/configs.c \
	@srcdir@/src/lua.c \
	@srcdir@/src/socket.c \
	@srcdir@/src/util.c \
	@srcdir@/src/server.c \
	@srcdir@/src/loader.c \
	@srcdir@/src/ctx/ctx-http.c \
	@srcdir@/src/lua/lib.c \
	@srcdir@/src/lua/db.c \
	@srcdir@/src/lua/echo.c \
	@srcdir@/src/lua/lua.c \
	@srcdir@/src/lua/json.c \
	@srcdir@/src/lua/rand.c \
	@srcdir@/src/lua/filesystem.c \
	@srcdir@/src/lua/http.c \
	@srcdir@/src/filters/filter-static.c \
	@srcdir@/src/filters/filter-echo.c \
	@srcdir@/src/filters/filter-dirent.c \
	@srcdir@/src/filters/filter-redirect.c \
	@srcdir@/src/filters/filter-lua.c

OBJ = ${SRC:.c=.o}
TARGET = main
TESTS = luabind router util
UNAME = $(shell uname)
DOMAIN = localhost 

# Handle slight differences between Debian and others...
#ifeq ($(UNAME),Linux)
#	DEBUNAME = $(shell uname -a | awk '{ print $$2 }')
#	ifeq ($(DEBUNAME),debian)
#		LDFLAGS += $(shell pkg-config --libs --cflags lua5.3 gnutls) 
#	else
#		LDFLAGS += $(shell pkg-config --libs --cflags lua gnutls) 
#	endif
#endif
#
#ifeq ($(UNAME),Darwin)
#	CC = clang
#	CFLAGS = $(CLANGFLAGS) 
#	LDFLAGS += $(shell pkg-config --libs --cflags lua gnutls) 
#endif


# main - Compiles all code needed to get hypno running
main: $(OBJ)
	-@test -d $(srcdir)/bin/ || mkdir $(srcdir)/bin/
	$(CC) $(LDFLAGS) $(CFLAGS) $(srcdir)/src/cli/server.c -o $(srcdir)/bin/$(NAME)-server $(OBJ) $(srcdir)/vendor/liblua.a 
	$(CC) $(LDFLAGS) $(CFLAGS) $(srcdir)/src/cli/harness.c -o $(srcdir)/bin/$(NAME)-harness $(OBJ) $(srcdir)/vendor/liblua.a 
	$(CC) $(LDFLAGS) $(CFLAGS) $(srcdir)/src/cli/cli.c -o $(srcdir)/bin/$(NAME)-cli $(OBJ) $(srcdir)/vendor/liblua.a 

#	$(CC) $(LDFLAGS) $(CFLAGS) $(srcdir)/src/cli/package.c -o $(srcdir)/bin/$(NAME)-package $(OBJ)

# debug - Builds code with debugging flags on
debug: debug-clang
	@printf '' > /dev/null

clang: CC = clang
clang: CFLAGS = $(CLANGFLAGS)
clang: main
	@printf '' > /dev/null

debug-clang: CC = clang
debug-clang: CFLAGS = $(CLANGFLAGS)
debug-clang: CFLAGS += -g -fsanitize=address -fsanitize-undefined-trap-on-error $(DEBUGFLAGS)
debug-clang: main
	@printf '' > /dev/null

debug-gcc: CC = gcc
debug-gcc: CFLAGS += -g -O0 $(DEBUGFLAGS)
debug-gcc: main
	@printf '' > /dev/null


# install - Installs targets to $PREFIX/{bin,share} and /var/lib
install:
	cp $(srcdir)/bin/* $(PREFIX)/bin/
	-test -d $(PREFIX)/share/$(NAME)/ || mkdir -p $(PREFIX)/share/$(NAME)/
	test -d $(PREFIX)/share/$(NAME)/
	cp $(srcdir)/share/* $(PREFIX)/share/$(NAME)/
	-mkdir -p $(WEBDIR)/ && chown $(SRVUSER):$(SRVGROUP) $(WEBDIR)/
	-test -d /var/lib/$(NAME)/ || mkdir /var/lib/$(NAME)/
	test -d /var/lib/$(NAME)/
	-cp $(srcdir)/lib/* /var/lib/$(NAME)/
	chown -R $(SRVUSER):$(SRVGROUP) /var/lib/$(NAME)/


# cygwin-install - Installs hypno as a service suitable for use with Cygwin 
cygwin-install:
	cygstart --action=runas cygrunsrv --install hypno --user $(USER) -p /usr/local/bin/hypno-server -a '--start --config /var/www/config.lua'


# systemd-install - Installs systemd on Linux systems
systemd-install:
	sed '{ s#__PREFIX__#$(PREFIX)#; s#__SRVUSER__#$(SRVUSER)#; s#__SRVGROUP__#$(SRVGROUP)# }' \
		$(PREFIX)/share/$(NAME)/etc.systemd.system.hypno.service > /etc/systemd/system/hypno.service



# uninstall - Uninstalls hypno
uninstall:
	-rm -rf /var/lib/$(NAME)/ $(PREFIX)/share/$(NAME)/	
	-rm $(PREFIX)/bin/$(NAME)-{cli,harness,server}


# examples - Runs hypno with the files in example/.  Use -e PORT to change port number.
examples: PORT=2222
examples: $(TARGET) 
examples: 
	@clear
	@lua -e "a=loadfile( 'example/config.lua' )(); \
		hosts = {}; for k,v in pairs(a.hosts) do table.insert( hosts, 'http://' .. k ) end; \
		print( 'Hosts at example/config.lua are:\n' .. table.concat( hosts, '\n' ) );"
	@printf "Starting hypno-server, and listening for requests at port 2222...\n"
	@$(srcdir)/bin/$(NAME)-server \
		--start --port $(PORT) --config $(srcdir)/example/config.lua --user $$USER

# repl - Build and test libraries for REPL usage
#	test -f sqlite3.o || $(CC) $(CFLAGS) -fPIC -c vendor/sqlite3.c -o shared/sqlite3.o
repl:
	$(CC) $(CFLAGS) -fPIC -c src/database.c -o shared/database.o
	$(CC) $(CFLAGS) -fPIC -c vendor/zhasher.c -o shared/zhasher.o
	$(CC) $(CFLAGS) -fPIC -c src/luabind.c -o shared/luabind.o
	$(CC) $(CFLAGS) -fPIC -c src/lua-db.c -o shared/lua-db.o
	$(CC) -shared $(LDFLAGS) $(CFLAGS) -fPIC -o lib$(NAME).so shared/database.o \
		shared/lua-db.o shared/zhasher.o shared/luabind.o
	lua -l libhypno - < tests/lua-db/dbtest.lua
 
# test -  Build all test files
test: $(OBJ) 
test: CFLAGS += -g -fsanitize=address -fsanitize-undefined-trap-on-error $(DEBUGFLAGS) -DTEST_H
test:
	-@test -d $(srcdir)/bin/ || mkdir $(srcdir)/bin/
	for t in $(TESTS); do $(CC) $(LDFLAGS) $(CFLAGS) -o bin/$$t src/test/$${t}-test.c $(OBJ); done

# deps - Build some of the larger dependencies first (they take a minute)
deps:
	$(CC) $(CFLAGS) -o $(srcdir)/vendor/sqlite3.o -c $(srcdir)/vendor/sqlite3.c 

# clean - Get rid of object files and tests 
clean:
	-@find $(srcdir)/src/ -maxdepth 2 -type f -name "*.o" | xargs rm
	-@find $(srcdir)/bin/ -maxdepth 1 -type f | xargs rm
	-@find $(srcdir)/vendor/ -maxdepth 1 -type f -name "*.o" | xargs rm

#-@find $(srcdir)/vendor/ -maxdepth 1 -type f -name "*.o" ! -name "sqlite3.o" | xargs rm

# list - List all the targets and what they do
list:
	@printf 'Available options are:\n'
	@sed -n '/^# / { s/# //; 1d; p; }' Makefile | awk -F '-' '{ printf "  %-20s - %s\n", $$1, $$2 }'

# plat - Build on a different platform by specifying the target
# figure out host and ping it to see if its running
# either package this or scp -r * to host
# go to host and try to build with commands
# exit
plat:
	make -f build/Makefile.arch boom
	echo $(OS)	
	
#if 0
# stress - Stress test the server
stress: LIMIT=512
stress: URL="http://carolinascholar.com/login?xasdfas=asdfsa" 
stress:
	tests/stress.sh $(LIMIT) $(URL)

# pkg - Make a package of the latest tagged version for distribution
pkg:
	git archive --format tar HEAD | gzip > build/$(NAME)-`git tag | tail -n 1`.tar.gz

# pkgtest - Make a package of the latest version of dev
pkgtest:
	git archive --format tar HEAD | \
		gzip > $(NAME)-`git tag | tail -n 1`.tar.gz

# umakefile - Generate a Makefile appropriate for a regular user
nmakefile:
	@sed '/^# /d' Makefile | cpp - | sed '/^# /d'

# changelog - Generate a full changelog from the commit history
changelog:
	@printf "# CHANGELOG\n\n"
	@printf "## STATS\n\n"
	@printf -- "- Commit count: "
	@git log --full-history --oneline | wc -l
	@printf -- "- Project Inception "
	@git log --full-history | grep Date: | tail -n 1
	@printf -- "- Last Commit "
	@git log -n 1 | grep Date:
	@printf -- "- Authors:\n"
	@git log --full-history | grep Author: | sort | uniq | sed '{ s/Author: //; s/^/\t- /; }'
	@printf "\n"
	@printf "## HISTORY\n\n"
	@git log --full-history --author=Antonio | sed '{ s/^   /- /; }'
	@printf "\n<link rel=stylesheet href=changelog.css>\n"
#endif

docs:
	-@mkdir docs/
	FF=/tmp/readme.`date +%F`.$$RANDOM.md; \
	markdown README.md > $$FF && \
	for n in `grep --line-number 'pre>' $$FF | \
		sed '{ s#<pre>#,#; s#</pre>#|# }' | \
		awk -F ':' '{ printf "%d%s", $$1, $$2 }' | \
		sed '{ s/ //g; s/|/ /g }'`; \
	do \
		L=`echo $$n | awk -F ',' '{ print $$1 }'`; \
		R=`echo $$n | awk -F ',' '{ print $$2 }'`; \
		sed -i "{ \
			$$(( $$L + 1 )),$$(( $$R - 1 ))s/</\&lt/g; \
			$$(( $$L + 1 )),$$(( $$R - 1 ))s/>/\&gt;/g \
		}" $$FF; \
	done && \
	mv $$FF docs/index.html

Makefile: Makefile.in config.status
	./config.status $@

config.status: configure
	./config.status --recheck

README.md: docs
	printf '' >/dev/null

# By default, we need to be running https
# A command-line for generating self signed certs is below
cert: CERTNAME=cert
cert:
	-mkdir tmp/
	openssl req -x509 -newkey rsa:4096 \
		-keyout tmp/$(CERTNAME).pem \
		-out tmp/$(CERTNAME).crt \
		-days 365 -nodes -subj '/CN=$(DOMAIN)'

.PHONY: docs
