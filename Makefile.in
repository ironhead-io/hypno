# @configure_input@
## --------------------------------------------------------- ##
## Makefile
## 
## @summary
## Contains all the targets necessary to assemble
## Hypno on most machines. 
##
## Eventually, this will be dropped in favor of
## autotools.
##
## @author
## Copyright 2020 Tubular Modular Inc. dba Collins Design
## --------------------------------------------------------- ##

# Package-specific
NAME = @PACKAGE_NAME@
VERSION = @PACKAGE_VERSION@ 

# Prefix-specific
PREFIX = @prefix@
EXEC_PREFIX = @exec_prefix@
BINDIR = @bindir@

# VPATH-specific
srcdir = @srcdir@
VPATH = @srcdir@

# Security-specific
USER = http
GROUP = http

# Everything else
LDFLAGS = -lgnutls -llua -ldl -lpthread
DEBUGFLAGS = -DDEBUG_H
CLANGFLAGS = -Wall -Werror -Wno-unused -Wno-format-security -Ivendor
GCCFLAGS = -Wall -Werror -Wno-unused -Wno-strict-overflow -Wno-strict-aliasing \
	-Wno-format-truncation -Wno-return-local-addr -O2 -Ivendor
CFLAGS = $(GCCFLAGS)
CC = gcc
SRC = \
	@srcdir@/vendor/sqlite3.c \
	@srcdir@/vendor/zrender.c @srcdir@/vendor/zhasher.c @srcdir@/vendor/zwalker.c \
	@srcdir@/vendor/zhttp.c @srcdir@/src/configs.c @srcdir@/src/db-sqlite.c \
	@srcdir@/src/luabind.c @srcdir@/src/mime.c @srcdir@/src/socket.c \
	@srcdir@/src/util.c @srcdir@/src/ctx-http.c @srcdir@/src/ctx-https.c \
	@srcdir@/src/server.c @srcdir@/src/loader.c @srcdir@/src/mvc.c \
	@srcdir@/src/router.c @srcdir@/src/filter-static.c @srcdir@/src/filter-c.c \
	@srcdir@/src/filter-echo.c @srcdir@/src/filter-dirent.c @srcdir@/src/filter-redirect.c \
	@srcdir@/src/filter-lua.c

#@srcdir@/src/ctx-https.c @srcdir@/src/filter-echo.c @srcdir@/src/filter-lua.c @srcdir@/src/filter-dirent.c @srcdir@/src/filter-c.c @srcdir@/src/xml.c @srcdir@/src/json.c @srcdir@/src/dirent-filter.c
OBJ = ${SRC:.c=.o}
TARGET = main
TESTS = loader database luabind router util #server render filter config 


# main - Compiles all code needed to get hypno running
main: $(OBJ)
	-@test -d $(srcdir)/bin/ || mkdir $(srcdir)/bin/
	$(CC) $(LDFLAGS) $(CFLAGS) $(srcdir)/src/main.c -o $(srcdir)/bin/$(NAME) $(OBJ) 
	$(CC) $(LDFLAGS) $(CFLAGS) $(srcdir)/src/cli.c -o $(srcdir)/bin/hcli $(OBJ)

# debug - Builds code with debugging flags on
debug: debug-clang
	@printf '' > /dev/null

clang: CC = clang
clang: CFLAGS = $(CLANGFLAGS)
clang: main
	@printf '' > /dev/null

debug-clang: CC = clang
debug-clang: CFLAGS = $(CLANGFLAGS)
debug-clang: CFLAGS += -g -fsanitize=address -fsanitize-undefined-trap-on-error $(DEBUGFLAGS)
debug-clang: main
	@printf '' > /dev/null

debug-gcc: CC = gcc
debug-gcc: CFLAGS += -g -O0 $(DEBUGFLAGS)
debug-gcc: main
	@printf '' > /dev/null


# install - Installs targets to $PREFIX/bin
install:
	cp $(srcdir)/bin/hypno $(srcdir)/bin/hcli $(PREFIX)/bin/

# examples - Runs hypno with the files in example/.  Use -e PORT to change port number.
examples: PORT=2222
examples: $(TARGET) 
examples: 
	@lua -e "a=loadfile( 'example/config.lua' )(); \
		hosts = {}; for k,v in pairs(a.hosts) do table.insert( hosts, 'http://' .. k ) end; \
		print( 'Hosts at example/config.lua are: ' .. table.concat( hosts, ', ' ) );"
	$(srcdir)/bin/hypno --start --port $(PORT) --config $(srcdir)/example/config.lua 

# repl - Build and test libraries for REPL usage
#	test -f sqlite3.o || $(CC) $(CFLAGS) -fPIC -c vendor/sqlite3.c -o shared/sqlite3.o
repl:
	$(CC) $(CFLAGS) -fPIC -c src/database.c -o shared/database.o
	$(CC) $(CFLAGS) -fPIC -c vendor/zhasher.c -o shared/zhasher.o
	$(CC) $(CFLAGS) -fPIC -c src/luabind.c -o shared/luabind.o
	$(CC) $(CFLAGS) -fPIC -c src/lua-db.c -o shared/lua-db.o
	$(CC) -shared $(LDFLAGS) $(CFLAGS) -fPIC -o lib$(NAME).so shared/database.o \
		shared/lua-db.o shared/zhasher.o shared/luabind.o
	lua -l libhypno - < tests/lua-db/dbtest.lua
 
#%.o: %.c 
#	$(CC) -c -o $@ $< $(CFLAGS)

# test -  Build all test files
test: $(OBJ) 
test: CFLAGS+=-DTEST_H
test:
	-@test -d $(srcdir)/bin/ || mkdir $(srcdir)/bin/
	for t in $(TESTS); do $(CC) $(LDFLAGS) $(CFLAGS) -o bin/$$t src/test/$${t}-test.c $(OBJ); done

# deps - Build some of the larger dependencies first (they take a minute)
deps:
	$(CC) $(CFLAGS) -o $(srcdir)/vendor/sqlite3.o -c $(srcdir)/vendor/sqlite3.c 

# clean - Get rid of object files and tests 
clean:
	-@find $(srcdir)/src/ -maxdepth 1 -type f -name "*.o" | xargs rm
	-@find $(srcdir)/bin/ -maxdepth 1 -type f | xargs rm
	-@find $(srcdir)/vendor/ -maxdepth 1 -type f -name "*.o" ! -name "sqlite3.o" | xargs rm

# list - List all the targets and what they do
list:
	@printf 'Available options are:\n'
	@sed -n '/^# / { s/# //; 1d; p; }' Makefile | awk -F '-' '{ printf "  %-20s - %s\n", $$1, $$2 }'

#if 0
# pkg - Make a package of the latest tagged version for distribution
pkg:
	git archive --format tar HEAD `git tag | tail -n 1` | \
		gzip > $(NAME)-`git tag | tail -n 1`.tar.gz

# pkgtest - Make a package of the latest version of dev
pkgtest:
	git archive --format tar HEAD | \
		gzip > $(NAME)-`git tag | tail -n 1`.tar.gz

# umakefile - Generate a Makefile appropriate for a regular user
nmakefile:
	@sed '/^# /d' Makefile | cpp - | sed '/^# /d'

# changelog - Generate a full changelog from the commit history
changelog:
	@printf "# CHANGELOG\n\n"
	@printf "## STATS\n\n"
	@printf -- "- Commit count: "
	@git log --full-history --oneline | wc -l
	@printf -- "- Project Inception "
	@git log --full-history | grep Date: | tail -n 1
	@printf -- "- Last Commit "
	@git log -n 1 | grep Date:
	@printf -- "- Authors:\n"
	@git log --full-history | grep Author: | sort | uniq | sed '{ s/Author: //; s/^/\t- /; }'
	@printf "\n"
	@printf "## HISTORY\n\n"
	@git log --full-history --author=Antonio | sed '{ s/^   /- /; }'
	@printf "\n<link rel=stylesheet href=changelog.css>\n"
#endif

Makefile: Makefile.in config.status
	./config.status $@

config.status: configure
	./config.status --recheck
