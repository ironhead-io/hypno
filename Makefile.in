# @configure_input@
## --------------------------------------------------------- ##
## Makefile
## 
## @summary
## Contains all the targets necessary to assemble
## Hypno on most machines. 
##
## @author
## Copyright 2022 Ironhead, Inc.
## --------------------------------------------------------- ##
BINNAME = @PACKAGE_NAME@
VERSION = @PACKAGE_VERSION@
PREFIX = @prefix@
EXEC_PREFIX = @exec_prefix@
BINDIR = @bindir@
LOGDIR = @logdir@
WWWROOT = @wwwroot@
WWWPORT = @wwwport@
SVCPATH = @svcpath@
srcdir = @srcdir@
VPATH = @srcdir@
SRVUSER = @srvuser@
SRVGROUP = @srvgroup@
IFLAGS = -Ivendor -Ivendor/lua-5.4.3/src
LDFLAGS = @ld_flags@
DEBUGFLAGS = @debug_flags@
MODEL = HTHREAD_H
ASAN_OPTIONS = log_path=asan.log
GCCFLAGS = -Wall -Werror -Wno-unused -Wno-strict-overflow -Wno-unused-result -Wno-strict-aliasing -Wno-format-truncation -Wno-return-local-addr -D$(MODEL) -O2 $(IFLAGS)
INITMETHOD = @initsys@
CFLAGS = $(GCCFLAGS)
CC = gcc
SRC = \
	@srcdir@/vendor/zrender.c \
	@srcdir@/vendor/ztable.c \
	@srcdir@/vendor/sqlite3.c \
	@srcdir@/vendor/zdb.c \
	@srcdir@/vendor/zwalker.c \
	@srcdir@/vendor/zhttp.c \
	@srcdir@/vendor/zmime.c \
	@srcdir@/vendor/zjson.c \
	@srcdir@/vendor/router.c \
	@srcdir@/src/configs.c \
	@srcdir@/src/lua.c \
	@srcdir@/src/socket.c \
	@srcdir@/src/util.c \
	@srcdir@/src/server.c \
	@srcdir@/src/loader.c \
	@srcdir@/src/xml.c \
	@srcdir@/src/log.c \
	@srcdir@/src/ctx/ctx-http.c \
	@srcdir@/src/ctx/ctx-https.c \
	@srcdir@/src/lua/lib.c \
	@srcdir@/src/lua/db.c \
	@srcdir@/src/lua/echo.c \
	@srcdir@/src/lua/encdec.c \
	@srcdir@/src/lua/lua.c \
	@srcdir@/src/lua/json.c \
	@srcdir@/src/lua/rand.c \
	@srcdir@/src/lua/filesystem.c \
	@srcdir@/src/lua/http.c \
	@srcdir@/src/lua/hash.c \
	@srcdir@/src/filters/filter-static.c \
	@srcdir@/src/filters/filter-echo.c \
	@srcdir@/src/filters/filter-dirent.c \
	@srcdir@/src/filters/filter-redirect.c \
	@srcdir@/src/filters/filter-lua.c
OBJ = ${SRC:.c=.o}
UNAME = $(shell uname)
DOMAIN = @default_domain@
DISTDIR = $(BINNAME)-$(VERSION)
FILES = configure configure.ac install-sh LICENSE Makefile.in README.md

# main - Compiles all code needed to get hypno running
main: $(OBJ) vendor/liblua.a
	-@test -d $(srcdir)/bin/ || mkdir $(srcdir)/bin/
	$(CC) $(CFLAGS) $(srcdir)/src/cli/server.c -o $(srcdir)/bin/$(BINNAME)-server $(OBJ) $(srcdir)/vendor/liblua.a $(LDFLAGS)
	$(CC) $(CFLAGS) $(srcdir)/src/cli/harness.c -o $(srcdir)/bin/$(BINNAME)-harness $(OBJ) $(srcdir)/vendor/liblua.a $(LDFLAGS)
	$(CC) $(CFLAGS) $(srcdir)/src/cli/cli.c -o $(srcdir)/bin/$(BINNAME)-cli $(OBJ) $(srcdir)/vendor/liblua.a $(LDFLAGS)

# with-ssl: Identical to main except with inclusion of SSL targets.
with-ssl: LDFLAGS += -lgnutls
with-ssl: CFLAGS += -DINCLUDE_GNUTLS
with-ssl: $(OBJ) vendor/liblua.a vendor/libssl.a vendor/libcrypto.a
	-@test -d $(srcdir)/bin/ || mkdir $(srcdir)/bin/
	$(CC) $(LDFLAGS) $(CFLAGS) $(srcdir)/src/cli/server.c -o $(srcdir)/bin/$(BINNAME)-server $(OBJ) $(srcdir)/vendor/liblua.a $(srcdir)/vendor/libcrypto.a $(srcdir)/vendor/libssl.a
	$(CC) $(LDFLAGS) $(CFLAGS) $(srcdir)/src/cli/harness.c -o $(srcdir)/bin/$(BINNAME)-harness $(OBJ) $(srcdir)/vendor/liblua.a $(srcdir)/vendor/libcrypto.a $(srcdir)/vendor/libssl.a
	$(CC) $(LDFLAGS) $(CFLAGS) $(srcdir)/src/cli/cli.c -o $(srcdir)/bin/$(BINNAME)-cli $(OBJ) $(srcdir)/vendor/liblua.a $(srcdir)/vendor/libcrypto.a $(srcdir)/vendor/libssl.a

# debug - Builds code with debugging flags on (need logic for if CC == clang)
debug: CFLAGS += -g -O0 -fsanitize=address -fsanitize-undefined-trap-on-error $(DEBUGFLAGS)
debug: main
	@printf '' > /dev/null

# install - Runs a full system install
install: filesystem-install $(INITMETHOD)-install
	@printf '' > /dev/null

# filesystem-install - Installs targets to $PREFIX/{bin,share} and /var/lib
filesystem-install:
	install -d $(PREFIX)/bin
	install -m 0755 $(srcdir)/bin/hypno-cli $(PREFIX)/bin/
	install -m 0755 $(srcdir)/bin/hypno-harness $(PREFIX)/bin/
	install -m 0755 $(srcdir)/bin/hypno-server $(PREFIX)/bin/
	install -d $(PREFIX)/share/$(BINNAME)
	install -m 644 $(srcdir)/share/* $(PREFIX)/share/$(BINNAME)/
	install -d /etc/$(BINNAME)
	install -m 644 $(srcdir)/etc/etc.hypno.hypno.lua /etc/$(BINNAME)/hypno.lua
	-mkdir -p $(WWWROOT)/ && chown $(SRVUSER):$(SRVGROUP) $(WWWROOT)/

# lib-install - Create and install library directory for extensions
lib-install:
	install -d /var/lib/$(BINNAME)
	install -m 0755 $(srcdir)/lib/* /var/lib/$(BINNAME)/
	chown -R $(SRVUSER):$(SRVGROUP) /var/lib/$(BINNAME)/

# systemd-install - Installs systemd on Linux systems
systemd-install:
	sed "{ \
		s#__PREFIX__#$(PREFIX)#; \
		s#__SRVUSER__#$(SRVUSER)#; \
		s#__SRVGROUP__#$(SRVGROUP)#; \
		s#__LOGDIR__#$(LOGDIR)#g; \
		s#__WWWROOT__#$(WWWROOT)#; \
		s/__WWWPORT__/$(WWWPORT)/; \
	}" $(srcdir)/etc/etc.systemd.system.hypno.service > $(SVCPATH)/$(BINNAME).service

# cygwin-install - Installs hypno as a service suitable for use with Cygwin 
cygwin-install:
	cygstart --action=runas cygrunsrv --install hypno --user $(USER) -p /usr/local/bin/hypno-server -a '--start --config /var/www/config.lua'

# uninstall - Uninstalls hypno
uninstall:
	rm -f $(PREFIX)/bin/$(BINNAME)-cli
	rm -f $(PREFIX)/bin/$(BINNAME)-harness
	rm -f $(PREFIX)/bin/$(BINNAME)-server
	rm -f $(SVCPATH)/$(BINNAME).service
	rm -f /etc/$(BINNAME)/*
	-rmdir /etc/$(BINNAME)
	rm -f /var/lib/$(BINNAME)/*
	-rmdir /var/lib/$(BINNAME)
	rm -f $(PREFIX)/share/$(BINNAME)/*
	-rmdir $(PREFIX)/share/$(BINNAME)

# examples - Runs hypno with the files in example/.  Use -e PORT to change port number.
examples: PORT=2222
examples: main
	@clear
	@lua -e "a=loadfile( 'example/config.lua' )(); \
		hosts = {}; for k,v in pairs(a.hosts) do table.insert( hosts, 'http://' .. k ) end; \
		print( 'Hosts at example/config.lua are:\n' .. table.concat( hosts, '\n' ) );"
	@printf "Starting hypno-server, and listening for requests at port 2222...\n"
	@$(srcdir)/bin/$(BINNAME)-server \
		--start --port $(PORT) --config $(srcdir)/example/config.lua --user $$USER

# vendor/sqlite3.o - Build SQLite from our local copy
vendor/sqlite3.o: CFLAGS+=-Wno-misleading-indentation -Wno-deprecated-declarations
vendor/sqlite3.o:
	$(CC) $(CFLAGS) -lpthread -c -o vendor/sqlite3.o vendor/sqlite3.c

# vendor/libssl.a - Build OpenSSL libs statically
vendor/libssl.a vendor/libcrypto.a &:
	-@cd vendor/ && tar xzf openssl-1.1.1l.tar.gz && cd openssl-1.1.1l && ./config && make && mv libssl.a libcrypto.a ../

# vendor/liblua.a - Build Lua 5.4.3 statically
vendor/liblua.a: 
	-@cd vendor/ && cd lua-5.4.3 && make MYCFLAGS="-fPIC" && mv src/liblua.a ../

# clean - Get rid of object files and tests 
clean:
	-@find $(srcdir)/src/ -maxdepth 2 -type f -name "*.o" | xargs rm
	-@find $(srcdir)/bin/ -maxdepth 1 -type f | xargs rm
	-@find $(srcdir)/vendor/ -maxdepth 1 -type f -name "*.o" | xargs rm

# list - List all the targets and what they do
list:
	@printf 'Available options are:\n'
	@sed -n '/^# / { s/# //; 1d; p; }' Makefile | awk -F '-' '{ printf "  %-20s - %s\n", $$1, $$2 }'

# Create a package (in a different way)
dist: $(DISTDIR).tar.gz

# Create a package archive 
$(DISTDIR).tar.gz: $(DISTDIR)
	tar chof - $(DISTDIR) | gzip -9 -c > $@	
	rm -rf $(DISTDIR)

# Create a package directory
$(DISTDIR):
	rm -f $(DISTDIR).tar.gz
	rm -rf $(DISTDIR)
	mkdir -p $(DISTDIR)/src \
		$(DISTDIR)/vendor \
		$(DISTDIR)/include \
		$(DISTDIR)/etc \
		$(DISTDIR)/bin \
		$(DISTDIR)/lib
	cp $(FILES) $(DISTDIR)/
	cp -r src/* $(DISTDIR)/src/
	cp -r vendor/*.[ch] vendor/lua-5.4.3 $(DISTDIR)/vendor/

# Check that packaging worked (super useful for other distributions...) 
distcheck:
	gzip -cd $(DISTDIR).tar.gz | tar xvf -
	cd $(DISTDIR) && ./configure
	cd $(DISTDIR) && $(MAKE)
	cd $(DISTDIR) && $(MAKE) clean
	rm -rf $(DISTDIR)
	@echo "*** package $(DISTDIR).tar.gz is ready for distribution."

# tests - Build some common tests
tests:
	cd src/lua/tests && $(MAKE) -f Makefile
	
# check - Run common tests
check: main
	@echo "*** all tests passed"	


# copyright-update - Update copyright info across all source code
copyright-update:
	@find src -type f -name "*.[ch]" | \
		xargs sed -i "s/Copyright 2020-$$(( `date +%Y` - 1 ))/Copyright 2020-`date +%Y`/"

# key - Generate a private key for use SSL/TLS certificates
key:
	-mkdir $(DIR)/
	certtool \
		--generate-privkey \
		--sec-param High \
		--outfile $(DIR)/$(DOMAIN).pem && \
	chmod 600 $(DIR)/$(DOMAIN).pem && \
	chown $(SRVUSER):$(SRVGROUP) $(DIR)/$(DOMAIN).pem

# csr - Generate a certificate signing request
csr:
	-mkdir $(DIR)/
	certtool --generate-request --load-privkey $(DIR)/$(DOMAIN).pem --outfile $(DIR)/$(DOMAIN).csr

# cert - Generate a self-signed certificate for use with example sites
cert:
	-mkdir $(DIR)/
	certtool \
		--generate-self-signed \
		--load-privkey $(DIR)/$(DOMAIN).pem \
		--template etc/cert.template \
		--outfile $(DIR)/$(DOMAIN)-cert.pem

# cert-bundle - Generate private key, certificate signing reqeust and self-signed certificate all at once 
cert-bundle: CERTNAME=cert
cert-bundle: DIR=/mnt/c/Users/ramar/certs
cert-bundle: DOMAIN=thatname.com
cert-bundle: key csr cert

Makefile: Makefile.in config.status
	./config.status $@

config.status: configure
	./config.status --recheck

.PHONY: check clean dist distcheck docs install tests
