<<<<<<< HEAD
hypno's checklist
-----------------

what's absolutely needed to get something done?
	stability (of the network layer, and I have little idea of how to test this,
		maybe dabble in multithreading?)
	ssl / tls
	email for anything modern


what defines stability
	*this thing should never crash, for any reason
	*this thing should be able to count its connections

	a comprehensive test suite would include:
		a way to grab all of your dependencies (and possibly build them)
		a way to reliably start a server and kill it
		a way to reliably run a client (curl or wget is a better idea b/c someone
			else wrote it)
		regular GET of a variety of files (you can just embed them in a file and
			generate them, pack no seperate files, too hard to keep them seperate)
		regular POSTs back to a server somehow
		stress testing of the weird chainy thing in data.lua (or whatever)	



return to rendering



document all your work on youtube or something...


extra things that still need to be done
	tls / ssl
	add function pointers to nw_write(...) and nw_read(...) (this way ssl or any
other library function that overrides typical read and write will work)


opening and closing things...
	can't remember how multiple threads handle things
	as long as they aren't literally reading the same thing it should be fine
	multiple handles can be the same on each file

	x allocate the HttpStreamer object and modify http.c to contain this.  This stuff should really be in the library...

	you might want to skip the embedded file check, but it's a good test to have either way...



additional binary tests:
	Cincinnati-skyline-from-kentucky-shore-night.jpg
	morewindows.jpg
	mrdr404.jpg
	op-blue.png
	road.jpg
	room.jpg
	room2.jpg
	sign.jpg
	sisfrac.jpg
	walkway.jpg
	water.jpg
	weiner.jpg
	windows.jpg
	windows.new.jpg


the best way to handle static files is preparing a header (and only a header)
then either passing a pointer to an open file handle or opening it from http_send and passing stuff

	- need a bf_delete? (not really, but it makes it easy to modify that structure)

	- find slots (or modify Recvr to include slots) for a file handle and progress tracker

	- appending to r->response via bf_append should allow files to send off w/o trouble

	- pseudocode:

		const int bufsize = 200;
		if ( r->filepos == 0 )
			return ( r->stage = NW_COMPLETED );
		else {
			filepos	= r->filepos;
			*fileref = r->file;
			snprintf( buf, sizeof(buf), "%d\r\n", bufsize );
			bf_append( r->response, buf, strlen(buf) ); 
			bf_append( r->response, fileref, bufsize );
			*fileref += bufsize;
			r->stage = NW_AT_WRITE;
			return 1; 
		}

	- this seems easy, but will probably involve something weird...
		
	- TLS is easier to modify.  Change signature of nw_write and nw_read to use ( Selector *, Recvr * ) - Then the write and read functions can be thrown in w/o touching the Recvr again...



hypnob:
	- first run: 
	x	create a folder at ~/.hypno
	x	create a database
	x	create the first table (or the others)
	x	fail on empty list
	x	fail on blank --create
		show all list items without crashing
	x	create a site folder successfully
		load and serve one directory
		load and serve from a bunch of directories


hypno:
	-	write a test suite that can throw GET x <1M
	-	write a test suite that can throw POST x <1M
	-	write a test suite that tests route parsing
	-	load model subtables as filenames
	- js does odd things in chrome, and chrome will throw some crazy names your way ( /:10 and such, hmm... )
	- also don't know how to handle streaming / chunked responses
	- to make things safe, use a fork(), then kill that...


today
=====
- checklist of all elements
		model.(*) - the "sum" of all the model files
		http.(*)
			cookie.(*) - All cookie info
			session.(*) - Dunno where this goes yet
			request.(*) - All request data
			response.(*) - All response data
			header.(*) - All header data	
		db.(*)   - DB access crap

- node works better and doesn't require this...

x dumping works

x rendering works (but may have little issues here and there)

- there is a healthy bug in single:sq_save
	zero results crash 
		(b/c the code keeps going and trying to make a table even though there is nothing there...)

- also single:sq_save needs to use the result count for initializing lt_init
		1024 is never going to be the answer in all cases...

? write a function to put all the stack stuff in one table
		multiple nested tables does not work without crashing... 
		the bug is in the same place more than likely...

- write another function putting model eval and rendering in one place

- when that's done, rendering needs to work
		as long as tables are working, there should be little issue here

- then when that's done, you MIGHT be able to do work...
		...


- if I had to get a test run of this done, how would I do it?
	do I still care about this?

=======
...
>>>>>>> 1045a0482fafd0853ef3a09db97a08fe241a96bc

- render needs fixing (pretty hard and I'm low on brain power today...)

	debug the write error (it's so far a bit random)	
	add $ syntax (for pulling $key and $value)
	add ! syntax (for executing code)
	

-
 
