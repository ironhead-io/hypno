why?
----
after months I'm still having dumb problems with cf...
no one likes it, for not totally bad reasons...

theoretically, it's not super hard...
- open a socket
- parse the message
- process it via any means
- send it back
- call it a day


lua
---
- built fine on osx... :|  hmm
- table load utilities easier with some stuff (no two steps w/o single)
- error function that always works reliably
- dir and read file functions
- some way to run from a config file 


a decent framework shouldn't do a whole lot, but the following are required:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
<utilities are hard to make stable, and JS does a lot of things that I would
need... including shipping with a package manager...>

string.
socket.
db.
file


keep me handy
=============
	- handle a socket
		-s, -k = start, kill a server via hypno
		open it 
		receive data from it
		see what came parsed
		send data through it
		close it

	- database drivers:
		-t [ mysql, sqlite3, postgresql, etc ] = test database drivers via hypno-test
		sqlite3
		mysql
		postgresql
		maybe one of the nosqls depending on need

	- routing
		-u <file> = test a router setup via hypno (no json)
		interpret the routes in a file as they relate to code

	- templating
		-f <file> = test templates with data and files, 
		-d {} or "select * from etc;" =  you'll need some sort of lua data 
		be able to do raw replacements
		be able to do scripting in the language (use the language)
		
	- tooling
		this can be done from c too... no reason not to, but it can always be removed
		-c <dir> ...
		or
		--create-from <file> 
		shell script for now... is fine....
		can't move quickly w/o it
		create new directories and route structures
		remove directories
		possibly view what's in those directories

	- handle the request / response chain
		obvs, there's nothing here...
		give the user some variables to choose from
		be able to set things that the user should be able to set
		after parsing, basic routes are always needed:
		/dump
		/debug
		/etc...

	- run unit tests
		-t = run unit tests via hypno...	



now write a battle plan
=======================

x modify abws-server.c to be less full featured so it can handle this easy job...

write a server that:

x opens a socket:

x recvs ALL data:

	after parse, I should know where the site is:
	after finding it, I can then send it somewhere...

	EITHER
		send the whole message to Lua, let it do parsing
		create a header table (there should always be one)
		create a body table if there is one
	x OR
		the http library does this already,
		so convert that table to Lua via a table convert function laying around somewhere

	(I LEFT OFF HERE)
	*interpret a data file that should describe routing 

	EITHER in Lua
		try to run whatever lua code is there
		then run whatever views are there
	OR in C 
		load all the files referenced as models, catching exceptions, data can automatically be wrapped in the file name 
		then interpret the views

	all of this data should be written to a buffer and be done

	then close and start again





ideas
=====
- lua comes with a package manager
	because it can be configured on a per-user basis, it may
	be a great idea to configure some kind of script in setup/ to 
	introduce packages on a local level

- handling a large multi inundated request server may be easier in Lua than
	in C.  mostly because it supports a lot of things you need to make it happen	

- docs can be self generating sort of



haha
====
- initializing this router is the fucking poops
- however, once its done, I think thats it...


so uh... 
x	take httptest.c 
x	load lua
x	dump the table 
	dump what Lua sees
	then it should be easier to write the router against it...
	really, I don't think I needed that...
	all I needed were the URLs

	when testing: 
		test the status of the page, (200, 400 or 500 -- 500s can be thrown when args don't match, but will probably NOT work that way in prod)
		test that the right datatype is coming through
		utilities work well, so maybe use a "mirrored" Table?	

	battle plan:
		you have a goal:
			$5 * 50000 = $250,000
			If you made a small business that charged customer from $1 - $5 a month, you would see anywhere from $50000 to $250000 a month in revenue with 50000 customers.  Stick with $5 a month.  That is FAR cheaper than all competitors	
		
		knock out c/c debt, only $3.0K  ( i should hit that last $800, but come up w/ another way.  it's not useful either to knock this out )

		try to find a niche as a consultant for rough times... (so talk to agencies)

		bi-monthly visits might be the most sound way to do good things

		live somewhere you like
		
		have 6 mos of expenses SAVED (not coming, not on the way, just saved)

		find a business partner?	


.

if you finish this, do something fun with it...
	think about front end too...
	and marketing...



	break url,
	check each portion for a match in the table
		*use strcmbd to append new url poritions to the buffer ( x, x.y, x.y.z, etc... )
	if match found
		check type:
			table =
				if the url still has parameters, check for any other values 
					the problem is here, is that /check/:id could happen, where ID is required...  
					 but even then, expects can handle this... tell it that the parameter received should be something...
					continue
				if not, 
					check for 'expects' to validate values supplied
					check for 'model' and 'view' tables or values to evaluate
			string =
				return it
				would be incredibly useful to return the same named items... in model and app
			number = 
				return it
			funct  = 
				execute and return its result
			sql?   = 
				should reutrn formatted data, maybe specify the datatype... 
				just thinking crazy
