SENDFILE(2)                                  Linux Programmer's Manual                                 SENDFILE(2)

NAME
       sendfile - transfer data between file descriptors

SYNOPSIS
       #include <sys/sendfile.h>

       ssize_t sendfile(int out_fd, int in_fd, off_t *offset, size_t count);

SEND(3P)                                     POSIX Programmer's Manual                                    SEND(3P)

PROLOG
       This  manual page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may
       differ (consult the corresponding Linux manual page for details of Linux behavior), or  the  interface  may
       not be implemented on Linux.

NAME
       send — send a message on a socket

SYNOPSIS
       #include <sys/socket.h>

       ssize_t send(int socket, const void *buffer, size_t length, int flags);

DESCRIPTION
       The  send()  function  shall  initiate transmission of a message from the specified socket to its peer. The
       send() function shall send a message only when the socket is connected. If the socket is a  connectionless-
       mode socket, the message shall be sent to the pre-specified peer address.

SENDTO(3P)                                   POSIX Programmer's Manual                                  SENDTO(3P)

PROLOG
       This  manual page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may
       differ (consult the corresponding Linux manual page for details of Linux behavior), or  the  interface  may
       not be implemented on Linux.

NAME
       sendto — send a message on a socket

SYNOPSIS
       #include <sys/socket.h>

       ssize_t sendto(int socket, const void *message, size_t length,
           int flags, const struct sockaddr *dest_addr,
           socklen_t dest_len);

DESCRIPTION
       The sendto() function shall send a message through a connection-mode or connectionless-mode socket.

gnutls_record_send(3)                                 gnutls                                 gnutls_record_send(3)

NAME
       gnutls_record_send - API function

SYNOPSIS
       #include <gnutls/gnutls.h>

       ssize_t gnutls_record_send(gnutls_session_t session, const void * data, size_t data_size);

ARGUMENTS
       gnutls_session_t session
                   is a gnutls_session_t type.

       const void * data
                   contains the data to send

       size_t data_size
                   is the length of the data

DESCRIPTION
       This  function has the similar semantics with send().  The only difference is that it accepts a GnuTLS ses‐
       sion, and uses different error codes.  Note that if the send buffer is full, send() will block  this  func‐
       tion.  See the send() documentation for more information.

       You can replace the default push function which is send(), by using gnutls_transport_set_push_function().

       If  the  EINTR  is  returned  by  the internal push function then GNUTLS_E_INTERRUPTED will be returned. If
       GNUTLS_E_INTERRUPTED or GNUTLS_E_AGAIN is returned, you must call this function again with the  exact  same
       parameters,  or  provide a NULL pointer for  data and 0 for  data_size , in order to write the same data as
       before. If you wish to discard the previous data instead of  retrying,  you  must  call  gnutls_record_dis‐
       card_queued()  before  calling  this function with different parameters. Note that the latter works only on
       special transports (e.g., UDP).  cf. gnutls_record_get_direction().

       Note that in DTLS this function will return the GNUTLS_E_LARGE_PACKET error code if the  send  data  exceed
       the  data  MTU  value  -  as  returned by gnutls_dtls_get_data_mtu(). The errno value EMSGSIZE also maps to
       GNUTLS_E_LARGE_PACKET.  Note that since 3.2.13 this function can be called under cork  in  DTLS  mode,  and
       will refuse to send data over the MTU size by returning GNUTLS_E_LARGE_PACKET.

RETURNS
       The number of bytes sent, or a negative error code.  The number of bytes sent might be less than  data_size
       .  The maximum number of bytes this function can send in a single call depends on  the  negotiated  maximum
       record size.

REPORTING BUGS
       Report bugs to <bugs@gnutls.org>.
       Home page: https://www.gnutls.org

COPYRIGHT
       Copyright © 2001- Free Software Foundation, Inc., and others.
       Copying  and  distribution  of this file, with or without modification, are permitted in any medium without
       royalty provided the copyright notice and this notice are preserved.

SEE ALSO
       The full documentation for gnutls is maintained as a Texinfo manual.  If the /usr/share/doc/gnutls/  direc‐
       tory does not contain the HTML form visit

       https://www.gnutls.org/manual/

gnutls                                                 3.7.2                                 gnutls_record_send(3)
gnutls_record_recv(3)                                 gnutls                                 gnutls_record_recv(3)

NAME
       gnutls_record_recv - API function

SYNOPSIS
       #include <gnutls/gnutls.h>

       ssize_t gnutls_record_recv(gnutls_session_t session, void * data, size_t data_size);

ARGUMENTS
       gnutls_session_t session
                   is a gnutls_session_t type.

       void * data the buffer that the data will be read into

       size_t data_size
                   the number of requested bytes

DESCRIPTION
       This  function has the similar semantics with recv().  The only difference is that it accepts a GnuTLS ses‐
       sion, and uses different error codes.  In the special case that the  peer  requests  a  renegotiation,  the
       caller will receive an error code of GNUTLS_E_REHANDSHAKE.  In case of a client, this message may be simply
       ignored, replied with an alert GNUTLS_A_NO_RENEGOTIATION, or replied with a new handshake, depending on the
       client's  will.  A server receiving this error code can only initiate a new handshake or terminate the ses‐
       sion.

       If EINTR is returned by the internal pull function (the default is recv()) then  GNUTLS_E_INTERRUPTED  will
       be  returned.   If GNUTLS_E_INTERRUPTED or GNUTLS_E_AGAIN is returned, you must call this function again to
       get the data.  See also gnutls_record_get_direction().

RETURNS
       The number of bytes received and zero on EOF (for stream connections).  A negative error code  is  returned
       in case of an error.  The number of bytes received might be less than the requested  data_size .

REPORTING BUGS
       Report bugs to <bugs@gnutls.org>.
       Home page: https://www.gnutls.org

COPYRIGHT
       Copyright © 2001- Free Software Foundation, Inc., and others.
       Copying  and  distribution  of this file, with or without modification, are permitted in any medium without
       royalty provided the copyright notice and this notice are preserved.

SEE ALSO
       The full documentation for gnutls is maintained as a Texinfo manual.  If the /usr/share/doc/gnutls/  direc‐
       tory does not contain the HTML form visit

       https://www.gnutls.org/manual/

gnutls                                                 3.7.2                                 gnutls_record_recv(3)
